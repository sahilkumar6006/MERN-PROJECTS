import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useRef } from "react";
import { classNames } from "../lib/join-classes";
export default function FileBrowser(props) {
    const { dataTestId = "file-browser", inputId = "input-id", maxSizeInMB = 1, multiple = false, allowedFileTypes = [".pdf", ".jpeg", ".png", ".jpg"], pickerBtnText = "Click here to browse files", pickerBtnClassName = "file-browser-button", render = undefined, onSelectFiles, } = props;
    const sizeInBytes = maxSizeInMB * 1024 * 1024;
    const isStringPicker = typeof pickerBtnText === "string";
    const nopickerBtnText = pickerBtnText === null ||
        pickerBtnText === undefined ||
        (typeof pickerBtnText === "string" && pickerBtnText === "");
    const inputRef = useRef();
    const pickFileHandler = (e) => {
        e.preventDefault();
        e.stopPropagation();
        const fileArray = Array.from(e.target.files).filter((file) => file.size <= sizeInBytes);
        onSelectFiles(fileArray);
    };
    if (render === undefined && nopickerBtnText) {
        return (_jsxs("p", { "data-testid": "invalid-component", children: ["You must provide a ", _jsx("code", { children: "render" }), " prop or", " ", _jsx("code", { children: "pickerBtnText" }), " prop"] }));
    }
    return (_jsxs(_Fragment, { children: [render ? (render({
                onClick() {
                    inputRef.current?.click();
                },
            })) : (_jsx("button", { type: "button", "data-testid": dataTestId, onClick: () => {
                    inputRef.current?.click();
                }, className: classNames(isStringPicker ? pickerBtnClassName : ""), children: pickerBtnText })), _jsx("input", { value: "", type: "file", id: inputId, "data-testid": inputId, multiple: multiple, accept: allowedFileTypes.join(","), style: { display: "none" }, autoComplete: "new-password", onChange: (e) => {
                    pickFileHandler(e);
                }, ref: (node) => (inputRef.current = node) })] }));
}
