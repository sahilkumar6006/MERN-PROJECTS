import {
  require_jsx_runtime
} from "./chunk-CRNJR6QK.js";
import {
  require_react
} from "./chunk-ZMLY2J2T.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// node_modules/react-drag-drop-browser/dist/esm/index.mjs
import "/Users/m2/Downloads/chipin-mvp/node_modules/react-drag-drop-browser/dist/esm/styles.css";

// node_modules/react-drag-drop-browser/dist/esm/components/drag-and-drop.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/react-drag-drop-browser/dist/esm/lib/join-classes.js
function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

// node_modules/react-drag-drop-browser/dist/esm/components/drag-and-drop.js
var initState = {
  dropped: false,
  dragging: false,
  inDropZone: false
};
function DragAndDrop(props) {
  const { zoneId = "hot-zone", dataTestId = "hot-zone", maxSizeInMB = 1, children = "Drop files here", inZoneClassName = "inside-hot-zone", zoneClassName = "hot-zone", render = void 0, onDropFiles } = props;
  const sizeInBytes = maxSizeInMB * 1024 * 1024;
  const [state, setState] = (0, import_react.useState)(initState);
  const resetState = () => {
    setState(initState);
  };
  const handleDragEnter = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const target = e.target;
    const currentTarget = e.currentTarget;
    const relatedTarget = e.relatedTarget;
    const triggeredByHotZone = (target == null ? void 0 : target.id) === zoneId;
    const eventInDropZone = triggeredByHotZone || (currentTarget == null ? void 0 : currentTarget.contains(relatedTarget));
    setState((prev) => ({
      ...prev,
      dropped: false,
      inDropZone: eventInDropZone
    }));
  };
  const handleDragLeave = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const currentTarget = e.currentTarget;
    const relatedTarget = e.relatedTarget;
    const eventInDropZone = currentTarget == null ? void 0 : currentTarget.contains(relatedTarget);
    setState((prev) => ({
      ...prev,
      dropped: false,
      inDropZone: eventInDropZone
    }));
  };
  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const target = e.target;
    const currentTarget = e.currentTarget;
    e.dataTransfer.dropEffect = "copy";
    setState((prev) => ({
      ...prev,
      dragging: true,
      inDropZone: currentTarget == null ? void 0 : currentTarget.contains(target)
    }));
  };
  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const fileArray = Array.from(e.dataTransfer.files).filter((file) => file.size <= sizeInBytes);
    onDropFiles(fileArray);
    resetState();
  };
  if (render) {
    const renderWithId = (renderProps) => {
      const renderedNode = render(renderProps);
      return (0, import_react.cloneElement)(renderedNode, { id: zoneId });
    };
    return renderWithId({
      state,
      resetState,
      onDrop: handleDrop,
      onDragEnter: handleDragEnter,
      onDragLeave: handleDragLeave,
      onDragOver: handleDragOver
    });
  }
  return (0, import_jsx_runtime.jsx)("section", { id: zoneId, "data-testid": dataTestId, "aria-labelledby": "Drag and drop zone", className: classNames(zoneClassName, state.inDropZone ? inZoneClassName : ""), onBlur: resetState, onDrop: handleDrop, onDragOver: handleDragOver, onDragEnter: handleDragEnter, onDragLeave: handleDragLeave, children });
}

// node_modules/react-drag-drop-browser/dist/esm/components/file-browser.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);
function FileBrowser(props) {
  const { dataTestId = "file-browser", inputId = "input-id", maxSizeInMB = 1, multiple = false, allowedFileTypes = [".pdf", ".jpeg", ".png", ".jpg"], pickerBtnText = "Click here to browse files", pickerBtnClassName = "file-browser-button", render = void 0, onSelectFiles } = props;
  const sizeInBytes = maxSizeInMB * 1024 * 1024;
  const isStringPicker = typeof pickerBtnText === "string";
  const nopickerBtnText = pickerBtnText === null || pickerBtnText === void 0 || typeof pickerBtnText === "string" && pickerBtnText === "";
  const inputRef = (0, import_react2.useRef)();
  const pickFileHandler = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const fileArray = Array.from(e.target.files).filter((file) => file.size <= sizeInBytes);
    onSelectFiles(fileArray);
  };
  if (render === void 0 && nopickerBtnText) {
    return (0, import_jsx_runtime2.jsxs)("p", { "data-testid": "invalid-component", children: ["You must provide a ", (0, import_jsx_runtime2.jsx)("code", { children: "render" }), " prop or", " ", (0, import_jsx_runtime2.jsx)("code", { children: "pickerBtnText" }), " prop"] });
  }
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [render ? render({
    onClick() {
      var _a;
      (_a = inputRef.current) == null ? void 0 : _a.click();
    }
  }) : (0, import_jsx_runtime2.jsx)("button", { type: "button", "data-testid": dataTestId, onClick: () => {
    var _a;
    (_a = inputRef.current) == null ? void 0 : _a.click();
  }, className: classNames(isStringPicker ? pickerBtnClassName : ""), children: pickerBtnText }), (0, import_jsx_runtime2.jsx)("input", { value: "", type: "file", id: inputId, "data-testid": inputId, multiple, accept: allowedFileTypes.join(","), style: { display: "none" }, autoComplete: "new-password", onChange: (e) => {
    pickFileHandler(e);
  }, ref: (node) => inputRef.current = node })] });
}
export {
  DragAndDrop,
  FileBrowser
};
//# sourceMappingURL=react-drag-drop-browser.js.map
